import json;

'''
    This is what im thinking

    note that we wont need to specifcy a size parameter if we stream the data with a fixed headersize

    flags is an array/list (whichever it is in python) that contains things which would otherwise be [usr], [export], [help], etc
'''

class Message:
    def __init__(self, contents, source, destination, size, flags):
        self.contents = contents 
        self.source = source
        self.destination = destination
        self.size = size
        self.flags = flags

    def pack(self):
        return json.dumps(self).encode("utf-8")


    #im not sure if we should do this within the class or outside it so ill just add it anyway
    
    def send(self):
        data = self.pack()
        self.source.sendall(data)





'''
    note: I feel like there is a bit of redundancy if the target client receives a new msg object with the destination attribute still specified (since its already received). I think
    we will have to talk about that over the phone but its a small detail. 
'''
def unpackMsg(msg):
    return json.loads(msg)




'''
    example call:
    the the target is set to "server" because thats were it's stopping, but if you were sending to another client you would use their username instead. 
    Also, the flags are in a list because if in the future we add more attributes to the messages or commands, I would like it to be easily loopable. 

    msg = Message("Jacopo", client_socket, "server", 10, [usr])
    msg.send()


'''
